/* -*- tab-width: 4; -*- */
/*
 * Copyright Â© 2018, Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 */

/*
 * This is a sanity check for experimental TCP implementation for Zephyr RTOS:
 * https://github.com/ozhuraki/zephyr/blob/tcp2-dev/subsys/net/ip/tcp2.c
 *
 * It is also an exploratory playground for improvements to tcp_suite.ttcn
 */

module tcp2_check {

import from libtypes all;
import from libnetinet all;
import from libtest all;
import from libutils all;
import from port_data_types all;

modulepar {
	float T_default := 0.1;
	boolean fuzzer_enabled := false;
	boolean peer_assert_enabled := true;
	integer number_of_runs := 1;
}

type bitstring event_t length(3);

const event_t EV_NONE			:='000'B;
const event_t EV_KEEP			:='111'B;
const event_t EV_TIMEOUT		:='001'B;
const event_t EV_UNEXPECTED_MSG :='010'B;

type bitstring log_mask_t length(3);

#if 0
const event_t EV_NONE			:='000'B;
const event_t EV_KEEP			:='111'B;
const event_t EV_TIMEOUT		:='001'B;
const event_t EV_UNEXPECTED_MSG :='010'B;
#endif

/* Fuzzer component for incoming/outgoing drop, delay, reorder, corrupt */
/* Also used for transparent debug */
type component fuzzer_ct {
	port port_tcp P_TCP_IN;		/* from/to suite */
	port port_tcp P_TCP_OUT;	/* from/to system under test */
	port port_cf P_CF;			/* configuration port */
}

type component tcp_ct extends test_CT {
	var tcp_t tcp;
	var tcp_state_t s := TCP_NONE;
	var uint32_t seq := 0;
	var uint32_t ack := 0;
	var octetstring data := ''O;
	var octetstring data_unack := ''O; /* TODO: split into rcv/snd data */
	var integer data_step := 1;
	timer T := T_default;
	var event_t events := EV_NONE;
	var default d_as_timeout;
	var default d_as_unexpected_msg;
	var fuzzer_ct ct_fuzzer;
	port port_cf P_FZ;
	timer TT := 2.0; /* test case teardown, TODO: move into libtest
						or integrate into fail_on_events() */
}

function fuzzer() runs on fuzzer_ct
{
	var charstring cmd;
	var tcp_t tcp;
	var boolean incoming_drop := false;

	while (true) {
		alt {
		[] P_CF.receive("incoming_pass") {
			incoming_drop := false;
		}
		[] P_CF.receive("incoming_drop") {
			incoming_drop := true;
		}
		[] P_TCP_IN.receive(?) -> value tcp { /* data from suite */
			log("sut <- suite");
			P_TCP_OUT.send(tcp);
		}
		[] P_TCP_OUT.receive(?) -> value tcp { /* data from peer */
			if (incoming_drop) {
				repeat;
			}
			log("sut -> suite");
			P_TCP_IN.send(tcp);
		}
		}
	}
}

function tcp_dump() runs on tcp_ct
{
	log("state=", tcp_state_to_string(s), " seq=", seq, " ack=", ack);
}

altstep as_timeout() runs on tcp_ct
{
	[] T.timeout { log("as_timeout()"); setverdict(fail); stop; }
}

altstep as_unexpected_msg() runs on tcp_ct
{
	[] P_TCP.receive(?) {
		log("as_unexpected_msg()");
		tcp_dump();
		setverdict(fail);
		stop;
	}
}

#define EVENT_IS(_event, _kind) mask_is_present(_event, _kind)
#define EVENT_IS_SET(_event, _kind) mask_is_present(_event, _kind)
#define EVENT_SET(_event, _kind) mask_set(_event, _kind)
#define EVENT_CLEAR(_event, _kind) mask_clear(_event, _kind)

function fail_on_events(event_t event) runs on tcp_ct
{
	if (event == EV_KEEP) {
		return;
	}

	if (EVENT_IS(event, EV_TIMEOUT) and not EVENT_IS_SET(events, EV_TIMEOUT)) {
		d_as_timeout := activate(as_timeout());
		EVENT_SET(events, EV_TIMEOUT);
	}

	if (not EVENT_IS_SET(event, EV_TIMEOUT) and
			EVENT_IS_SET(events, EV_TIMEOUT)) {
		deactivate(d_as_timeout);
		EVENT_CLEAR(events, EV_TIMEOUT);
	}

	if (EVENT_IS(event, EV_UNEXPECTED_MSG) and not
			EVENT_IS_SET(events, EV_UNEXPECTED_MSG)) {
		d_as_unexpected_msg := activate(as_unexpected_msg());
		EVENT_SET(events, EV_UNEXPECTED_MSG);
	}

	if (not EVENT_IS_SET(event, EV_UNEXPECTED_MSG) and
			EVENT_IS_SET(events, EV_UNEXPECTED_MSG)) {
		deactivate(d_as_unexpected_msg);
		EVENT_CLEAR(events, EV_UNEXPECTED_MSG);
	}
}

function st(tcp_state_t new, event_t fail_on := EV_KEEP) runs on tcp_ct
{
	/* TODO: Add debug levels */
	//log(tcp_state_to_string(s), " -> ", tcp_state_to_string(new));
	s := new;
	fail_on_events(fail_on);
}

type enumerated tp_msg_type_t {
	TP_COMMAND,
	TP_INTROSPECT_TCP_REQUEST,
	TP_INTROSPECT_TCP_REPLY,
	TP_INTROSPECT_MEMORY_REQUEST,
	TP_INTROSPECT_MEMORY_REPLY,
	TP_INTROSPECT_PACKETS_REQUEST,
	TP_INTROSPECT_PACKETS_RESPONSE,
	TP_DEBUG_STOP,
	TP_DEBUG_STEP,
	TP_DEBUG_CONTINUE,
	TP_DEBUG_RESPONSE,
	TP_DEBUG_BREAKPOINT_ADD,
	TP_DEBUG_BREAKPOINT_DELETE,
	TP_TRACE_ADD,
	TP_TRACE_DELETE
} with {
	encode "TEXT";
}

external function tp_msg_type_to_string(in tp_msg_type_t x) return charstring
	with { extension "prototype(convert) encode(TEXT)"; }

type record tp_json {
	charstring msg_type,
	charstring status,
	charstring state,
	integer seq,
	integer ack,
	charstring rcv,
	charstring data,
	charstring op
} with {
	encode "JSON";
	variant(msg_type)	"JSON: name as msg_type";
	variant(status)	"JSON: name as status";
	variant(state)	"JSON: name as state";
	variant(seq)	"JSON: name as seq";
	variant(ack)	"JSON: name as ack";
	variant(rcv)	"JSON: name as rcv";
	variant(data)	"JSON: name as data";
	variant(op)	"JSON: name as op";
}

external function f_json_enc(in tp_json x) return octetstring
	with { extension "prototype(convert) encode(JSON)"; }

external function f_json_dec(in octetstring x) return tp_json
	with { extension "prototype(convert) decode(JSON)"; }

function peer_assert(tcp_state_t state) runs on tcp_ct
{
	if (not peer_assert_enabled) { return; }

	/* TODO: check how to omit */
	var tp_json req := { msg_type := "TP_INTROSPECT_TCP_REQUEST", status := "", state := "", seq := 0, ack := 0, rcv := "", data := "", op := "" };
	var udp_t udp;

	P_UDP.send(ts_UDP(d := f_json_enc(req)));
	T.start;

	alt {
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			var tp_json json := f_json_dec(udp.data);

			//log(json);

			if (json.state != tcp_state_to_string(state)) {
				log("ASSERT: ", json.state, " != ", tcp_state_to_string(state));
				setverdict(fail);
			}
		}
		[] T.timeout {
			log("peer_assert() timeout");
			setverdict(fail);
		}
	}
}

function peer_introspect() runs on tcp_ct return tp_json
{
	var tp_json tp := { msg_type := "TP_INTROSPECT_TCP_REQUEST",
						status := "", state := "", seq := 0, ack := 0,
						rcv := "", data := "", op := "" };
	var udp_t udp;

	P_UDP.send(ts_UDP(d := f_json_enc(tp)));
	T.start;

	alt {
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			tp := f_json_dec(udp.data);
		}
		[] T.timeout {
			log("peer_introspect() timeout");
			setverdict(fail);
			stop;
		}
	}

	return tp;
}

function fuzzer_on(octetstring data_to_send := ''O) runs on tcp_ct
{
	ct_fuzzer := fuzzer_ct.create;

	disconnect(self:P_TCP, eth_ct:P_TCP);

	connect(self:P_TCP, ct_fuzzer:P_TCP_IN);
	connect(ct_fuzzer:P_TCP_OUT, eth_ct:P_TCP);

	connect(self:P_FZ, ct_fuzzer:P_CF);

	ct_fuzzer.start(fuzzer());
}

function tp_cmd(tp_msg_type_t msg_type, charstring o := "",
				charstring d := "") runs on tcp_ct
{
	var charstring cmd := tp_msg_type_to_string(msg_type);
	/* TODO: Template here? */
 	var tp_json req := { msg_type := cmd, status := "",
						 state := "", seq := 0, ack := 0,
						 rcv := "", data := d, op := o };
	var udp_t udp;

	P_UDP.send(ts_UDP(d := f_json_enc(req)));

	/* alt { */
	/* 	[] P_UDP.receive(?) -> value udp { } */
	/* 	[] T.timeout { setverdict(fail); } */
	/* } */
}

/**
 * Active TCP connection establishment,
 * data transfer (data echoing expected) and active close
 */
function test_tcp_connect(octetstring data_to_send := ''O) runs on tcp_ct
{
	test_ct_init();

	if (fuzzer_enabled) { fuzzer_on(); }

	data_push(data, data_to_send);

	TT.start;

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	st(TCP_SYN_SENT, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) -> value tcp {
		T.stop;
		peer_assert(TCP_SYN_SENT);
		st(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := seq, th_ack := pre_inc(ack)));
		st(TCP_ESTABLISHED, fail_on := EV_NONE);
		//peer_assert(TCP_ESTABLISHED); /* TODO: Handle when debug is ready */
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		peer_assert(TCP_ESTABLISHED);
		var tcp_t tcp2 := valueof(ts_TCP);
		if (th_is_set(tcp, TH_PSH)) {
			th_set(tcp2, TH_ACK);
			pre_inc(ack, lengthof(tcp.data));
		}
		if (th_is_set(tcp, TH_ACK)) {
			if (tcp.th_ack > seq - lengthof(data_unack)) {
				var integer diff := tcp.th_ack - (seq - lengthof(data_unack));
				data_pop(data_unack, diff);
			}
		}
		if (tcp2.th_flags != TH_NONE) {
			tcp2.th_seq := seq;
			tcp2.th_ack := ack;
			P_TCP.send(tcp2);
		}
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] T.timeout {
		peer_assert(TCP_ESTABLISHED);
		if (lengthof(data_unack) > 0) { goto wait_for_data; }
		if (lengthof(data_to_send) > 0) {
			data_unack := data_pop(data_to_send, data_step);
			P_TCP.send(ts_TCP(f := TH_PSH,
							  th_seq := post_inc(seq, lengthof(data_unack)),
							  th_ack := ack, d := data_unack));
			goto wait_for_data;
		}
		/* Everything is sent and aknowledged, do active close */
		P_TCP.send(ts_TCP(f := TH_FIN or4b TH_ACK, th_seq := post_inc(seq),
						  th_ack := ack));
		st(TCP_FIN_WAIT1, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
		/* TODO: peer_assert() here is tricky, since peer in active close
		   sends ack and fin+ack immedeately */
label wait_for_data;
		T.start; repeat;
	}
	[s == TCP_FIN_WAIT1] P_TCP.receive(tr_TCP(f := TH_ACK,
											  th_seq := ack, th_ack := seq)) {
		T.stop;
		/* TODO: peer_assert() here is tricky, since peer in active close
		   sends ack and fin+ack immedeately */
		st(TCP_FIN_WAIT2);
		T.start; repeat;
	}
	[s == TCP_FIN_WAIT2] P_TCP.receive(tr_TCP(f := TH_FIN or4b TH_ACK,
											  th_seq := ack, th_ack := seq)) {
		T.stop;
		peer_assert(TCP_LAST_ACK);
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := seq, th_ack := pre_inc(ack)));
		st(TCP_TIME_WAIT, fail_on := EV_NONE);
		T.start; repeat; /* T * 2 */
	}
	[s == TCP_TIME_WAIT] T.timeout {
		st(TCP_CLOSED);
		peer_assert(TCP_CLOSED);
	}
	[] TT.timeout { setverdict(fail); stop; }

	}  /* end of alt */

	if (s == TCP_CLOSED and
			lengthof(data_to_send) == 0 and
			lengthof(data_unack) == 0) {
		setverdict(pass);
	}

	tp_cmd(TP_COMMAND, "CLOSE");
}

/**
 * Passive TCP connection establishment,
 * data transfer and active close
 */
function test_tcp_listen(octetstring data_to_receive := ''O) runs on tcp_ct
{
	test_ct_init();

	TT.start;

	tp_cmd(TP_COMMAND, "CONNECT", d := oct2str(data_to_receive));

	st(TCP_LISTEN, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;

	alt {
	[s == TCP_LISTEN] P_TCP.receive(tr_TCP(f := TH_SYN)) -> value tcp {
		T.stop;
		peer_assert(TCP_SYN_SENT);
		st(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(f := TH_SYN or4b TH_ACK, th_seq := post_inc(seq),
						  th_ack := pre_inc(ack)));
		st(TCP_SYN_SENT);
		T.start; repeat;
	}
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_ACK,
											 th_ack := seq)) -> value tcp {
		T.stop;
		st(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		st(TCP_ESTABLISHED, fail_on := EV_NONE);
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(f := TH_PSH, th_seq := ack,
												d := ?)) -> value tcp {
		T.stop;
		peer_assert(TCP_ESTABLISHED);
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := seq,
						  th_ack := pre_inc(ack, lengthof(tcp.data))));
		data_push(data, tcp.data);
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] T.timeout {
		peer_assert(TCP_ESTABLISHED);
		if (data == data_to_receive) {
			/* Everything is received, do active close */
			P_TCP.send(ts_TCP(f := TH_FIN or4b TH_ACK, th_seq := post_inc(seq),
							  th_ack := ack));
			st(TCP_FIN_WAIT1, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
		}
		T.start; repeat;
	}
	[s == TCP_FIN_WAIT1] P_TCP.receive(tr_TCP(f := TH_ACK,
											  th_seq := ack, th_ack := seq)) {
		T.stop;
		st(TCP_FIN_WAIT2);
		T.start; repeat;
	}
	[s == TCP_FIN_WAIT2] P_TCP.receive(tr_TCP(f := TH_FIN or4b TH_ACK,
											  th_seq := ack, th_ack := seq)) {
		T.stop;
		peer_assert(TCP_LAST_ACK);
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := seq, th_ack := pre_inc(ack)));
		st(TCP_TIME_WAIT, fail_on := EV_NONE);
		T.start; repeat; /* TODO: T * 2 */
	}
	[s == TCP_TIME_WAIT] T.timeout {
		st(TCP_CLOSED);
		peer_assert(TCP_CLOSED);
	}
	[] TT.timeout { setverdict(fail); stop; }
	} /* end of alt */

	tp_cmd(TP_COMMAND, "CLOSE");
}

/**
 * Test active TCP connection establishment and active close
 */
testcase test_tcp_connect_no_data_close() runs on tcp_ct
{
	test_tcp_connect(data_to_send := ''O);
}

/**
 * Test active TCP connection establishment,
 * data transfer (data echoing expected) and active close
 */
testcase test_tcp_connect_data_close() runs on tcp_ct
{
	test_tcp_connect(data_to_send := '01'O);
}

/**
 * Test active TCP connection establishment,
 * "more data" data transfer (data echoing expected) and active close
 */
testcase test_tcp_connect_more_data_close() runs on tcp_ct
{
	test_tcp_connect(data_to_send := '010203'O);
}

/**
 * Test passive TCP connection establishment,
 * data transfer and active close
 */
testcase test_tcp_listen_no_data_close() runs on tcp_ct
{
	test_tcp_listen(data_to_receive := '01'O);
}

/**
 * Test passive TCP connection establishment,
 * data transfer and active close
 */
testcase test_tcp_listen_data_close() runs on tcp_ct
{
	test_tcp_listen(data_to_receive := '01'O);
}

/**
 * Test passive TCP connection establishment,
 * data transfer and active close
 */
testcase test_tcp_listen_more_data_close() runs on tcp_ct
{
	test_tcp_listen(data_to_receive := '010203'O);
}

/**
 * Test TCP debug
 */
testcase test_tcp_debug() runs on tcp_ct
{
 	test_ct_init();

	TT.start;

	tp_cmd(TP_DEBUG_STOP);

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(?)) {
		T.stop;
		setverdict(fail);
	}
	[] T.timeout {
		tp_cmd(TP_DEBUG_STEP);
	}
	} /* end of alt */

	T.start;
	alt {
	[] P_TCP.receive(tr_TCP(?)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	} /* end of alt */

	tp_cmd(TP_COMMAND, "CLOSE");
}

/**
 * Test peer's retransmission
 */
testcase test_tcp_retransmit() runs on tcp_ct
{
	test_ct_init();

	fuzzer_on();

	P_FZ.send("incoming_drop");

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	st(TCP_SYN_SENT);
	T.start(T_default * 3.0);
	T.timeout;
	P_FZ.send("incoming_pass");

	TT.start;
	T.start(T_default * 3.0);

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
							th_ack := seq)) -> value tcp {
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	tp_cmd(TP_COMMAND, "CLOSE");
}

control {

	var integer i := number_of_runs;

	while (post_dec(i) > 0) {
		execute(test_tcp_connect_no_data_close());
		execute(test_tcp_connect_data_close());
		execute(test_tcp_connect_more_data_close());
		execute(test_tcp_listen_no_data_close());
		execute(test_tcp_listen_data_close());
		execute(test_tcp_listen_more_data_close());
		execute(test_tcp_retransmit());
		execute(test_tcp_debug());
	}

} /* end of control */

} /* end of module */
