/* -*- tab-width: 4; -*- */
/*
 * Copyright Â© 2018, Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 */

module libutils {

import from libnetinet all;

external function fx_ether_ntoa(octetstring addr) return charstring;
external function fx_inet6_ntop(octetstring addr) return charstring;

external function fx_ether_aton(charstring addr) return octetstring;
external function fx_inet_aton(charstring addr) return octetstring;
external function fx_inet6_pton(charstring addr) return octetstring;

external function fx_inet6_chksum(octetstring data) return integer;

function mask_is_present(bitstring val, bitstring mask) return boolean
{
	if ((val and4b mask) == mask) {
		return true;
	} else {
		return false;
	}
}

function mask_set(inout bitstring val, bitstring mask)
{
	val := val or4b mask;
}

function mask_clear(inout bitstring val, bitstring mask)
{
	val := val and4b (not4b mask);
}

function pre_inc(inout integer i, integer step := 1) return integer
{
	i := i + step;
	return i;
}

function post_inc(inout integer i, integer step := 1) return integer
{
	var integer r := i;
	i := i + step;
	return r;
}

function post_dec(inout integer i, integer step := 1) return integer
{
	var integer r := i;
	i := i - step;
	return r;
}

function data_pop(inout octetstring d_in, integer len := 1) return octetstring
{
	var octetstring d_out := substr(d_in, 0, len);

	d_in := replace(d_in, 0, len, ''O);

	return d_out;
}

function data_push(inout octetstring data, octetstring data_new)
{
	data := data & data_new;
}

} /* end of module */
