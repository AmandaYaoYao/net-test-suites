/* -*- tab-width: 4; -*- */
/*
 * Copyright Â© 2018, Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 */

module tcp2_suite {

import from libtypes all;
import from libnetinet2 all;
import from libtest2 all;
import from port_data_module all;
import from libutils_module all;

type component tcp_CT extends test_CT {
	var tcp_t tcp;
	var tcp_state_t s := TCP_NONE;
	var integer sp := 0; /* source port */
	var integer msn := 0; /* my sequence number */
	var integer psn := 0; /* peer sequence number */
	var octetstring d_s := ''O; /* data to send */
	var octetstring d_u := ''O; /* unacknowledged data */
	var integer d_step := 1;
	timer T := 3.0;
	var default d_as_timeout;
	var default d_as_unexpected_msg;
}

altstep as_timeout() runs on tcp_CT
{
	[] T.timeout { setverdict(fail); self.stop; }
}

altstep as_unexpected_msg() runs on tcp_CT
{
	[] P_TCP.receive(?) { setverdict(fail); self.stop; }
}

function tcp_enc_dec(tcp_t msg_in, out tcp_t msg_out)
{
	var octetstring d := tcp_enc(msg_in);

	msg_out := tcp_dec(d);
}

function tcp_compare(tcp_t msg1, tcp_t msg2)
{
	if (msg1 == msg2) {
		setverdict(pass);
	} else {
		log("Decoded: ", msg2);
		setverdict(fail);
		self.stop;
	}
}

/**
 * Test TCP RAW encoder and decoder
 */
testcase test_tcp_codecs() runs on tcp_CT
{
	var tcp_t tcp2;

	/* No data, no options */

	tcp := valueof(ts_TCP)

	tcp_enc_dec(tcp, tcp2);

	tcp.th_doff := 5;

	tcp_compare(tcp, tcp2);

	/* Data, no options */

	tcp := valueof(ts_TCP(d := '1111'O));

	tcp_enc_dec(tcp, tcp2);

	tcp.th_doff := 5;

	tcp_compare(tcp, tcp2);

	/* Data, options */

	tcp := valueof(ts_TCP(d := '1111'O));

	tcp.opt := {
		{ TO_MSS, 4, '0000'O },
		{ TO_MSS, 4, '0000'O }
	}

	tcp_enc_dec(tcp, tcp2);

	tcp.th_doff := 7;

	tcp_compare(tcp, tcp2);

	/* No data, options */

	tcp := valueof(ts_TCP);

	tcp.opt := {
		{ TO_MSS, 4, '0000'O },
		{ TO_MSS, 4, '0000'O }
	}

	tcp_enc_dec(tcp, tcp2);

	tcp.th_doff := 7;

	tcp_compare(tcp, tcp2);
}

/**
 * TODO: Add templates test here
 */
testcase test_tcp_templates() runs on tcp_CT
{
	setverdict(pass);
}

function pre_inc(inout integer sn, integer step := 1) return integer
{
	sn := sn + step;
	return sn;
}

function post_inc(inout integer sn, integer step := 1) return integer
{
	var integer r := sn;
	sn := sn + step;
	return r;
}

function data_pop(inout octetstring data_in, integer len := 1)
	return octetstring
{
	var octetstring data_out := substr(data_in, 0, len);

	data_in := replace(data_in, 0, len, ''O);

	return data_out;
}

function data_push(inout octetstring data, octetstring data_new)
{
	data := data & data_new;
}

function sn_set(inout tcp_t tcp, integer msn, integer psn)
{
	tcp.th_seq := msn;
	tcp.th_ack := psn;
}

/**
 * Test TCP connection establishment, data transfer
 * (data echoing expected) and connection close.
 */
testcase test_tcp_conn(integer isn := 0, /* Initial sequence number */
					   integer src_port := 4242,
					   octetstring data_to_send := ''O)
	runs on tcp_CT
{
	test_ct_init();

	d_as_timeout := activate(as_timeout());
	d_as_unexpected_msg := activate(as_unexpected_msg());
	msn := isn;
	sp := src_port;
	T.start;

	alt {
	[s == TCP_NONE] T.timeout {
		P_TCP.send(ts_TCP(TH_SYN, sp := sp, sn := post_inc(msn)));
		s := TCP_SYN_SENT;
		T.start; repeat;
	}
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(TH_SYN or4b TH_ACK, an := msn))
			-> value tcp {
		T.stop;
		s := TCP_SYN_RECEIVED;
		psn := tcp.th_seq;
		P_TCP.send(ts_TCP(TH_ACK, sp := sp, sn := msn, an := pre_inc(psn)));
		data_push(d_s, data_to_send);
		T.start; repeat;
	}
	[s == TCP_SYN_RECEIVED] T.timeout {
		s := TCP_ESTABLISHED;
		deactivate(d_as_timeout); deactivate(d_as_unexpected_msg);
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		var tcp_t tcp2 := valueof(ts_TCP);
		if (th_is_set(tcp, TH_PSH)) {
			th_set(tcp2, TH_ACK);
			pre_inc(psn, lengthof(tcp.data));
		}
		if (th_is_set(tcp, TH_ACK)) {
			if (tcp.th_ack > msn - lengthof(d_u)) {
				var integer diff := tcp.th_ack - (msn - lengthof(d_u));
				data_pop(d_u, diff);
			}
		}
		if (tcp2.th_flags != TH_NONE) {
			sn_set(tcp2, msn, psn);
			P_TCP.send(tcp2);
		}
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] T.timeout {
		if (lengthof(d_u) > 0) { goto wait_for_data; }
		if (lengthof(d_s) > 0) {
			d_u := data_pop(d_s, d_step);
			P_TCP.send(ts_TCP(TH_PSH, sn := post_inc(msn, lengthof(d_u)),
						  an := psn, d := d_u));
			goto wait_for_data;
		}
		/* Everything is sent and aknowledged, close the connection */
		s := TCP_CLOSE_WAIT;
		d_as_timeout := activate(as_timeout());
		d_as_unexpected_msg := activate(as_unexpected_msg());
		P_TCP.send(ts_TCP(TH_FIN or4b TH_ACK, sp := sp,
					  sn := post_inc(msn), an := psn));
label wait_for_data;
		T.start; repeat;
	}
	[s == TCP_CLOSE_WAIT] P_TCP.receive(tr_TCP(TH_FIN or4b TH_ACK, an := msn)) {
		T.stop;
		s := TCP_CLOSED;
		goto test_end;
	}
	}
label test_end;
	if (s == TCP_CLOSED and lengthof(d_s) == 0 and lengthof(d_u) == 0) {
		setverdict(pass);
	}
}

/**
 * Send TCP messsage with no flags set, expect nothing
 */
testcase Test_TCP_001() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_NONE));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send TCP messsage with all flags set, expect nothing
 */
testcase Test_TCP_002() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_URG or4b TH_ACK or4b TH_PSH
					  or4b TH_RST or4b TH_SYN or4b TH_FIN));
	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send TCP SYN, expect SYN+ACK
 */
testcase Test_TCP_003() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, sn := pre_inc(msn)));
}

/**
 * SYN received, send ACK with th_seq=0, th_ack=0, expect RST+ACK
 */
testcase Test_TCP_004() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK))
			-> value tcp {
		T.stop;
		psn := tcp.th_seq;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_ACK));
		T.start; repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_RST or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, sn := pre_inc(msn)));
}

/**
 * SYN received, send ACK (th_seq incremented, th_ack=0), expect RST
 */
testcase Test_TCP_005() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK))
			-> value tcp {
		T.stop;
		s := TCP_SYN_RECEIVED;
		psn := tcp.th_seq;
		P_TCP.send(ts_TCP(f := TH_ACK, sn := pre_inc(msn)));
		T.start; repeat;
	}
	[] P_TCP.receive(tr_TCP(f := TH_RST or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, sn := pre_inc(msn)));
}

/**
 * Send SYN+RST, expect ACK+RST
 */
testcase Test_TCP_006() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN or4b TH_RST, sn := post_inc(msn)));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST, an := msn)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send RST in the middle of three way handshake, expect nothing
 */
testcase Test_TCP_007() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 an := msn)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_RST, sn := post_inc(msn)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_SENT] T.timeout {
		setverdict(fail);
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(?) {
		T.stop;
		setverdict(fail);
	}
	[s == TCP_SYN_RECEIVED] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send RST (th_seq=0) in the middle of three way handshake, expect RST+ACK
 */
testcase Test_TCP_008() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 an := msn)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_RST, sn := 0));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 an := msn)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN instead of ACK, expect RST+ACK
 */
testcase Test_TCP_009() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 an := msn)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 an := msn)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN (th_seq=0) instead of ACK, expect RST+ACK (with th_ack=1)
 */
testcase Test_TCP_010() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 an := msn)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		msn := 0;
		P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 an := msn)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN+ACK, expect nothing
 */
testcase Test_TCP_011() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN or4b TH_ACK));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send SYN with the wrong checksum, expect nothing
 */
testcase Test_TCP_012() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sum := 1));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		T.stop;
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Check a reaction on SYN with the payload
 */
testcase Test_TCP_013() runs on tcp_CT {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sn := post_inc(msn), d := '01'O));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, sn := msn));
}

/**
 * TODO: SYN sent, expect SYN+ACK, verify TCP checksum
 */

control {
	//execute(test_tcp_codecs());
	//execute(test_tcp_templates());
	execute(Test_TCP_001());
	execute(Test_TCP_002());
	execute(Test_TCP_003());
	execute(Test_TCP_003());
	execute(Test_TCP_004());
	execute(Test_TCP_005());
	execute(Test_TCP_006());
	execute(Test_TCP_007());
	execute(Test_TCP_008());
	execute(Test_TCP_009());
	execute(Test_TCP_010());
	execute(Test_TCP_011());
	execute(Test_TCP_012());
	execute(Test_TCP_013());
	//execute(test_tcp_conn(data_to_send := '01'O));
}

}
