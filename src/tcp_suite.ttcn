/* -*- tab-width: 4; -*- */
/*
 * Copyright Â© 2018, Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 */

module tcp_suite {

import from libtypes all;
import from libnetinet all;
import from libtest all;
import from libutils all;
import from port_data_types all;

modulepar {
	float T_default := 3.0;
}

type component tcp_ct extends test_ct {
	var tcp_t tcp;
	var tcp_state_t s := TCP_LISTEN;
	var u32 seq := 0;
	var u32 ack := 0;
}

/**
 * Send TCP messsage with no flags set, expect nothing
 */
testcase tc_tcp_001() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_NONE));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send TCP messsage with all flags set, expect nothing
 */
testcase tc_tcp_002() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_URG or4b TH_ACK or4b TH_PSH
					  or4b TH_RST or4b TH_SYN or4b TH_FIN));
	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send TCP SYN, expect SYN+ACK
 */
testcase tc_tcp_003() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, th_seq := pre_inc(seq)));
}

/**
 * SYN received, send ACK with th_seq=0, th_ack=0, expect RST+ACK
 */
testcase tc_tcp_004() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK))
			-> value tcp {
		T.stop;
		ack := tcp.th_seq;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_ACK));
		T.start; repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_RST or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, th_seq := pre_inc(seq)));
}

/**
 * SYN received, send ACK (th_seq incremented, th_ack=0), expect RST
 */
testcase tc_tcp_005() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK))
			-> value tcp {
		T.stop;
		s := TCP_SYN_RECEIVED;
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := pre_inc(seq)));
		T.start; repeat;
	}
	[] P_TCP.receive(tr_TCP(f := TH_RST or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, th_seq := pre_inc(seq)));
}

/**
 * Send SYN+RST, expect ACK+RST
 */
testcase tc_tcp_006() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN or4b TH_RST, th_seq := post_inc(seq)));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST, th_ack := seq)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send RST in the middle of three way handshake, expect nothing
 */
testcase tc_tcp_007() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_RST, th_seq := post_inc(seq)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_SENT] T.timeout {
		setverdict(fail);
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(?) {
		T.stop;
		setverdict(fail);
	}
	[s == TCP_SYN_RECEIVED] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send RST (th_seq=0) in the middle of three way handshake, expect RST+ACK
 */
testcase tc_tcp_008() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_RST, th_seq := 0));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 th_ack := seq)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN instead of ACK, expect RST+ACK
 */
testcase tc_tcp_009() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 th_ack := seq)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN (th_seq=0) instead of ACK, expect RST+ACK (with th_ack=1)
 */
testcase tc_tcp_010() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	s := TCP_SYN_SENT;

	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) {
		T.stop;
		s := TCP_SYN_RECEIVED;
		seq := 0;
		P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
		T.start;
		repeat;
	}
	[s == TCP_SYN_RECEIVED] P_TCP.receive(tr_TCP(f := TH_ACK or4b TH_RST,
												 th_ack := seq)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}
}

/**
 * Send SYN+ACK, expect nothing
 */
testcase tc_tcp_011() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN or4b TH_ACK));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Send SYN with the wrong checksum, expect nothing
 */
testcase tc_tcp_012() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, sum := 1));

	T.start;

	alt {
	[] P_TCP.receive(?) {
		T.stop;
		setverdict(fail);
	}
	[] T.timeout {
		setverdict(pass);
	}
	}
}

/**
 * Check a reaction on SYN with the payload
 */
testcase tc_tcp_013() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq), d := '01'O));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(f := TH_RST, th_seq := seq));
}

/**
 * TODO: SYN sent, expect SYN+ACK, verify TCP checksum
 */

/**
 * Test TCP connection establishment, data transfer
 * (data echoing expected) and connection close.
 */
testcase tc_tcp_conn(octetstring d := ''O) runs on tcp_ct
{
	test_ct_init();

	var octetstring data_to_send := d;
	var octetstring data_unack := ''O;
	var integer data_step := 1;

	d_as_timeout := activate(as_timeout());
	d_as_unexpected_msg := activate(as_unexpected_msg());

	P_TCP.send(ts_TCP(f := TH_SYN, th_seq := post_inc(seq)));
	s := TCP_SYN_SENT;
	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(f := TH_SYN or4b TH_ACK,
											 th_ack := seq)) -> value tcp {
		T.stop;
		s := TCP_SYN_RECEIVED;
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(f := TH_ACK, th_seq := seq, th_ack := pre_inc(ack)));
		T.start; repeat;
	}
	[s == TCP_SYN_RECEIVED] T.timeout {
		s := TCP_ESTABLISHED;
		deactivate(d_as_timeout); deactivate(d_as_unexpected_msg);
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		var tcp_t tcp2 := valueof(ts_TCP);
		if (th_is_set(tcp, TH_PSH)) {
			th_set(tcp2, TH_ACK);
			pre_inc(ack, lengthof(tcp.data));
		}
		if (th_is_set(tcp, TH_ACK)) {
			if (tcp.th_ack > seq - lengthof(data_unack)) {
				var integer diff := tcp.th_ack - (seq - lengthof(data_unack));
				data_pop(data_unack, diff);
			}
		}
		if (tcp2.th_flags != TH_NONE) {
			tcp2.th_seq := seq;
			tcp2.th_ack := ack;
			P_TCP.send(tcp2);
		}
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] T.timeout {
		if (lengthof(data_unack) > 0) { goto wait_for_data; }
		if (lengthof(data_to_send) > 0) {
			data_unack := data_pop(data_to_send, data_step);
			P_TCP.send(ts_TCP(f := TH_PSH,
							  th_seq := post_inc(seq, lengthof(data_unack)),
							  th_ack := ack, d := data_unack));
			goto wait_for_data;
		}
		/* Everything is sent and aknowledged, close the connection */
		s := TCP_CLOSE_WAIT;
		d_as_timeout := activate(as_timeout());
		d_as_unexpected_msg := activate(as_unexpected_msg());
		P_TCP.send(ts_TCP(f := TH_FIN or4b TH_ACK,
					th_seq := post_inc(seq), th_ack := ack));
label wait_for_data;
		T.start; repeat;
	}
	[s == TCP_CLOSE_WAIT] P_TCP.receive(tr_TCP(f := TH_FIN or4b TH_ACK,
											   th_ack := seq)) {
		T.stop;
		s := TCP_CLOSED;
		goto test_end;
	}
	}
label test_end;
	if (s == TCP_CLOSED and lengthof(data_to_send) == 0
			and lengthof(data_unack) == 0) {
		setverdict(pass);
	}
}

control {
	execute(tc_tcp_001());
	execute(tc_tcp_002());
	execute(tc_tcp_003());
	execute(tc_tcp_004());
	execute(tc_tcp_005());
	execute(tc_tcp_006());
	execute(tc_tcp_007());
	execute(tc_tcp_008());
	execute(tc_tcp_009());
	execute(tc_tcp_010());
	execute(tc_tcp_011());
	execute(tc_tcp_012());
	execute(tc_tcp_013());
	execute(tc_tcp_conn(d := '01'O));
}

}
